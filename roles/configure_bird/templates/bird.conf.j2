################################################
#               Variable header                #
################################################

define OWNAS =  {{ownas}};

{% if dn42_v6_only is not defined %}
define OWNIP =  {{ownip}};
{% endif %}
define OWNNET = {{ownasnet}};
define OWNNETSET = {{ownasnetset}};

define OWNIPv6 = {{ownip6}};
define OWNNETv6 = {{ownasnet6}};
define OWNNETSETv6 = {{ownasnetset6}};

define DN42_REGION = {{dn42_region}};
define DN42_COUNTRY = {{dn42_country}};

################################################
#                 Header end                   #
################################################

router id {{node_id}};

protocol device {
    scan time 10;
}

/*
 *  Utility functions
 */

function is_self_net() {
  return net ~ OWNNETSET;
}

function is_valid_network() {
  return net ~ [
    172.20.0.0/14{21,29}, # dn42
    172.20.0.0/24{28,32}, # dn42 Anycast
    172.21.0.0/24{28,32}, # dn42 Anycast
    172.22.0.0/24{28,32}, # dn42 Anycast
    172.23.0.0/24{28,32} # dn42 Anycast
  ];
}

roa4 table dn42_roa;

protocol static {
    roa4 { table dn42_roa; };
    include "/etc/bird/roa_dn42.conf";
};

{% if dn42_v6_only is not defined %}
protocol kernel {
    scan time 20;

    ipv4 {
        import none;
        export filter {
            if source = RTS_STATIC then reject;
            krt_prefsrc = OWNIP;
            accept;
        };
    };
}

protocol static {
    route OWNNET reject;

    ipv4 {
        import all;
        export none;
    };
}
{% endif %}

function is_self_net_v6() {
  return net ~ OWNNETSETv6;
}

function is_valid_network_v6() {
  return net ~ [
    fd00::/8{44,64} # ULA address space as per RFC 4193
  ];
}

roa6 table dn42_roa_v6;

protocol static {
    roa6 { table dn42_roa_v6; };
    include "/etc/bird/roa_dn42_v6.conf";
};

protocol kernel {
    scan time 20;

    ipv6 {
        import none;
        export filter {
            if source = RTS_STATIC then reject;
            krt_prefsrc = OWNIPv6;
            accept;
        };
    };
};

protocol static {
    route OWNNETv6 reject;

    ipv6 {
        import all;
        export none;
    };
}

include "/etc/bird/community_filters.conf";

template bgp dnpeers {
    local as OWNAS;
    path metric 1;
    med metric 1;
    enable extended messages 1;

{% if dn42_v6_only is not defined %}
    ipv4 {
        import filter {
          if is_valid_network() && !is_self_net() then {
            if (roa_check(dn42_roa, net, bgp_path.last) != ROA_VALID) then {
              print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
              reject;
            } else accept;
          } else reject;
        };

        export filter { if is_valid_network() && source ~ [RTS_STATIC, RTS_BGP] then accept; else reject; };
        import limit 1000 action block;
    };
{% endif %}

    ipv6 {
        import filter {
          if is_valid_network_v6() && !is_self_net_v6() then {
            if (roa_check(dn42_roa_v6, net, bgp_path.last) != ROA_VALID) then {
              print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
              reject;
            } else accept;
          } else reject;
        };
        export filter { if is_valid_network_v6() && source ~ [RTS_STATIC, RTS_BGP] then accept; else reject; };
        import limit 1000 action block;
    };
}

include "/etc/bird/babel.conf";
include "/etc/bird/ibgp/*";
include "/etc/bird/peers/*";
